openapi: 3.0.0
info:
  title: Visiteo API
  description: API for the Visiteo application
  version: 1.0.0
tags:
  - name: auth
    description: Аутентификация и авторизация
  - name: cards
    description: Управление карточками
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Войти в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Вход выполнен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/register:
    post:
      tags:
        - auth
      summary: Зарегистрировать нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Регистрация выполнена успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Обновить access token
      parameters:
        - in: cookie
          name: session
          schema:
            type: string
      responses:
        '200':
          description: Access token обновлен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Выйти из системы
      parameters:
        - in: cookie
          name: session
          schema:
            type: string
      responses:
        '200':
          description: Выход выполнен успешно
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/current:
    get:
      tags:
        - user
      summary: Получить текущего пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Пользователь получен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      tags:
        - user
      summary: Обновить профиль пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Профиль обновлен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /cards:
    get:
      tags:
        - cards
      summary: Получить все карточки пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список карточек
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - cards
      summary: Создать новую карточку
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Карточка успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /cards/{cardId}:
    get:
      tags:
        - cards
      summary: Получить карточку по id
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Карточка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      tags:
        - cards
      summary: Обновить карточку
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCardRequest'
      responses:
        '200':
          description: Карточка успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - cards
      summary: Удалить карточку
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Карточка успешно удалена
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
        - captcha
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        captcha:
          type: string
    User:
      type: object
      required:
        - id
        - email
        - username
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        avatar:
          type: string
          format: uri
    AuthResponse:
      type: object
      required:
        - accessToken
        - user
      properties:
        accessToken:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Error:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: string
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - username
        - captcha
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        username:
          type: string
        captcha:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        avatar:
          type: string
          format: uri
    Card:
      type: object
      required:
        - id
        - name
        - userId
        - isPublic
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        name:
          type: string
        content:
          type: string
        userId:
          type: string
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CardsList:
      type: array
      items:
        $ref: '#/components/schemas/Card'
    CreateCardRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    UpdateCardRequest:
      type: object
      properties:
        name:
          type: string
        content:
          type: string
        isPublic:
          type: boolean
  responses:
    UnauthorizedError:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: Некорректный запрос
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
